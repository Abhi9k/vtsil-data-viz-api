var v1 = {
	padding: {l:40,b:20,t:20,r:40},
	h:0,
	w:0,
	y:0,
	x:0,
	svg:null
}

var f1_sensor_coords=[[214, "1", -26.2272, -26.1048, 0.379], [219, "1", -26.2272, -26.1048, 0.379], [33, "1", 33.338, 33.558, 1.0], [82, "1", 39.629, 21.243, 0.84], [225, "1", 43.161, 3.594, 0.465], [264, "1", 17.33, 3.793, -0.015], [261, "1", -10.9272, -3.349, 0.379], [79, "1", 29.959, 12.62, 0.34], [222, "1", -0.151, -19.849, 0.375], [263, "1", -27.579, 38.2236, 0.729], [269, "1", 20.434, 21.985, 0.845], [52, "1", -27.579, 38.2236, 0.729], [257, "1", -9.8476, 12.8672, 0.379], [221, "1", -0.151, -19.849, 0.375], [212, "1", -13.188, 32.167, 0.73], [218, "1", 0.0, 0.0, 0.0], [266, "1", 17.33, 3.793, -0.015], [51, "1", -27.579, 38.2236, 0.729], [74, "1", 11.13864, 36.131942, -0.34003], [215, "1", -26.2272, -26.1048, 0.379], [220, "1", -0.151, -19.849, 0.375], [217, "1", 0.0, 0.0, 0.0], [262, "1", -10.9272, -3.349, 0.379], [54, "1", -13.188, 32.167, 0.73], [75, "1", 33.231, 21.346, 0.86], [259, "1", -9.8476, 12.8672, 0.379], [260, "1", -10.9272, -3.349, 0.379], [223, "1", 49.57, 32.093, -0.1], [78, "1", 39.643, 23.57, 0.835], [265, "1", 20.434, 21.985, 0.845], [216, "1", 0.0, 0.0, 0.0], [226, "1", 49.57, 32.093, -0.1], [36, "1", 33.262, 25.235, 0.865], [38, "1", 36.121, 32.19, 0.88], [228, "1", 11.13864, 36.131942, -0.34003], [231, "1", 43.161, 3.594, 0.465], [227, "1", 11.13864, 36.131942, -0.34003], [37, "1", 34.272, 32.215, 0.86], [76, "1", 33.247, 23.577, 0.855], [270, "1", 20.434, 21.985, 0.845], [258, "1", -9.8476, 12.8672, 0.379], [230, "1", 13.967, 13.844, 0.76], [267, "1", 17.33, 3.793, -0.015], [35, "1", 32.027, 26.336, -0.045], [31, "1", 49.57, 32.093, -0.1], [32, "1", 30.402, 32.224, 0.85], [41, "1", 41.276, 26.274, 0.85], [34, "1", 30.132, 33.839, 0.855], [77, "1", 39.666, 25.083, 0.845], [232, "1", 43.161, 3.594, 0.465]];
var f2_sensor_coords=[[55, "2", -0.005, -0.448, 4.867], [5, "2", -21.537, 3.14, 5.412], [28, "2", -14.277, 32.185, 5.297], [42, "2", 49.462, 32.208, 4.851], [88, "2", 20.444, 21.364, 5.407], [10, "2", -27.818, 38.645, 4.722], [60, "2", 13.942, 10.367, 5.392], [13, "2", -6.883, -16.185, 5.417], [11, "2", -21.133, -9.647, 5.427], [1, "2", -28.366, -28.537, 5.362], [61, "2", 26.787, 13.09, 5.417], [46, "2", 42.685, 3.754, 4.857], [43, "2", 49.462, 32.208, 4.851], [8, "2", -27.818, 38.645, 4.722], [0, "2", -28.366, -28.537, 5.362], [2, "2", -28.366, -28.537, 5.362], [45, "2", 11.226, 36.107, 4.412], [4, "2", -21.537, 3.14, 5.412], [47, "2", 42.685, 3.754, 4.857], [84, "2", 42.685, 3.754, 4.857], [44, "2", 49.462, 32.208, 4.851], [58, "2", -0.581, -19.413, 5.497], [86, "2", 17.096, 4.236, 5.452], [89, "2", 20.444, 21.364, 5.407], [59, "2", -0.581, -19.413, 5.497], [195, "2", 33.834, 25.14, 5.403], [7, "2", -27.818, 38.645, 4.722], [85, "2", 17.096, 4.236, 5.452], [40, "2", 11.226, 36.107, 4.412], [57, "2", -0.005, -0.448, 4.867], [39, "2", 11.226, 36.107, 4.412], [6, "2", -21.537, 3.14, 5.412], [9, "2", -14.277, 32.185, 5.297], [14, "2", -9.616, -3.38, 5.382], [56, "2", -0.005, -0.448, 4.867], [87, "2", 17.096, 4.236, 5.452], [90, "2", 20.444, 21.364, 5.407], [3, "2", -0.581, -19.413, 5.497]];
var f3_sensor_coords=[[114, "3", -27.76, 38.492, 9.236], [91, "3", -0.302, 21.905, 9.816], [128, "3", 30.098, 30.682, 9.811], [251, "3", 0.099, 3.952, 9.921], [247, "3", 10.715, 36.127, 8.996], [117, "3", -17.143, -9.671, 9.956], [120, "3", 8.253, 29.481, 9.886], [255, "3", -0.38, 16.037, 9.839], [129, "3", 23.698, 32.052, 10.001], [132, "3", 33.83449116, 23.91426679, 9.236], [105, "3", 23.702, 31.387, 9.996], [123, "3", 14.106, 31.447, 9.981], [153, "3", 41.627, 26.548, 9.966], [248, "3", 10.715, 36.127, 8.996], [95, "3", -0.327, 29.349, 9.851], [49, "3", -2.535, 18.987, 9.806], [118, "3", -19.338, 0.451, 10.116], [125, "3", 10.866, 31.362, 9.918], [134, "3", 26.793, 12.928, 9.971], [210, "3", -14.33, 32.172, 9.236], [16, "3", 42.766, 4.084, 10.161], [213, "3", 45.733, 7.437, 10.001], [169, "3", 41.627, 26.548, 9.966], [145, "3", 0.28, -0.235, 9.221], [211, "3", -27.76, 38.492, 9.236], [113, "3", -9.532, -3.708, 10.096], [99, "3", -2.487, 26.613, 9.826], [151, "3", -0.579, -19.376, 9.236], [19, "3", 17.168, 4.969, 10.001], [157, "3", 23.554, 4.282, 10.136], [130, "3", 20.495, 26.227, 9.996], [122, "3", 5.586, 31.554, 9.876], [18, "3", 17.168, 4.969, 10.001], [268, "3", 10.771, 4.942, 10.051], [155, "3", 1.697, -28.643, 9.236], [116, "3", -19.338, 0.451, 10.116], [249, "3", 10.715, 36.127, 8.996], [96, "3", -0.316, 26.601, 9.831], [146, "3", 0.28, -0.235, 9.221], [229, "3", 1.4, 3.952, 9.911], [15, "3", 42.766, 4.084, 10.161], [209, "3", -27.76, 38.492, 9.236], [112, "3", -7.639, -16.236, 9.896], [98, "3", -2.456, 29.36, 9.836], [224, "3", 6.371, 3.92, 9.906], [152, "3", 41.627, 26.548, 9.966], [135, "3", 30.084, 32.075, 9.811], [115, "3", -19.338, 0.451, 10.116], [271, "3", 48.9636548, 34.22204861, 9.236], [254, "3", 48.9636548, 34.22204861, 9.236], [148, "3", -0.579, -19.376, 9.236], [107, "3", 17.326, 32.063, 9.941], [149, "3", 1.697, -28.643, 9.236], [119, "3", 8.212, 28.375, 9.811], [20, "3", 17.168, 4.969, 10.001], [150, "3", -0.579, -19.376, 9.236], [131, "3", 20.495, 26.227, 9.996], [126, "3", 2.912, 30.534, 9.886], [156, "3", 36.349, 4.185, 10.051], [29, "3", -0.32, 16.015, 9.836], [108, "3", 20.504, 30.611, 9.981], [206, "3", -14.33, 32.172, 9.236], [127, "3", 2.903, 31.584, 9.891], [158, "3", 29.936, 4.211, 10.216], [21, "3", 20.495, 26.227, 9.996], [250, "3", 48.9636548, 34.22204861, 9.236], [17, "3", 42.766, 4.084, 10.161], [104, "3", 23.683, 30.602, 10.001], [102, "3", 20.516, 31.403, 9.981], [106, "3", 17.305, 30.649, 9.966], [147, "3", 0.28, -0.235, 9.221], [166, "3", 6.037, 15.753, 10.116], [92, "3", -0.304, 18.963, 9.826], [163, "3", 6.037, 15.753, 10.116], [124, "3", 8.283, 31.496, 9.876], [154, "3", 1.697, -28.643, 9.236], [97, "3", -2.483, 21.921, 9.811], [165, "3", 6.037, 15.753, 10.116], [133, "3", 13.80081844, 15.76779407, 9.236], [136, "3", 30.094, 31.326, 9.811], [162, "3", 0.295, 31.652, 9.866], [161, "3", 2.911, 29.53, 9.896], [103, "3", 20.509, 32.086, 9.981]];
var f4_sensor_coords=[[140, "4", 20.4, 20.061, 14.52], [185, "4", 16.997, 4.297, 14.61], [137, "4", 33.18, 19.699, 14.535], [245, "4", -19.933, -3.681, 17.37], [241, "4", -20.27, -18.513, 17.47], [237, "4", -13.561, 32.568, 13.635], [201, "4", -9.592, -18.805, 17.46], [139, "4", 20.4, 20.061, 14.52], [234, "4", -27.488, 39.031, 13.855], [143, "4", 13.927, 14.778, 14.495], [184, "4", 42.571, 3.486, 13.915], [244, "4", -19.933, -3.681, 17.37], [233, "4", -27.488, 39.031, 13.855], [236, "4", -13.561, 32.568, 13.635], [183, "4", 42.571, 3.486, 13.915], [186, "4", 16.997, 4.297, 14.61], [243, "4", -20.27, -18.513, 17.47], [242, "4", -9.592, -18.805, 17.46], [240, "4", 10.852, 35.941, 13.82], [207, "4", -9.174, -3.999, 17.375], [179, "4", 48.9636548, 34.22204861, 13.796], [187, "4", 16.997, 4.297, 14.61], [205, "4", -9.174, -3.999, 17.375], [208, "4", -9.174, -3.999, 17.375], [182, "4", 42.571, 3.486, 13.915], [168, "4", -9.592, -18.805, 17.46], [180, "4", 48.9636548, 34.22204861, 13.796], [235, "4", -27.488, 39.031, 13.855], [142, "4", 26.72, 14.093, 14.525], [109, "4", -20.27, -18.513, 17.47], [138, "4", 20.4, 20.061, 14.52], [246, "4", -19.933, -3.681, 17.37], [239, "4", 10.852, 35.941, 13.82], [181, "4", 48.9636548, 34.22204861, 13.796], [238, "4", 10.852, 35.941, 13.82]];
var f5_sensor_coords=[[23, "5", 36.364, 11.867, 20.083], [178, "5", -3.791, 25.379, 19.497], [30, "5", 34.229, 15.926, 21.932], [111, "5", 17.158, 11.973, 19.112], [176, "5", -14.126, 25.44, 19.507], [177, "5", -14.126, 25.44, 19.507], [22, "5", 17.158, 11.973, 19.112], [203, "5", -22.379, 31.979, 19.517], [174, "5", -22.379, 31.979, 19.517], [173, "5", -3.791, 25.379, 19.497], [27, "5", 17.158, 11.973, 19.112], [141, "5", 36.364, 11.867, 20.083], [100, "5", 34.229, 15.926, 21.932], [172, "5", -3.791, 25.379, 19.497], [26, "5", 21.458, 16.172, 22.057], [175, "5", -14.126, 25.44, 19.507], [24, "5", 36.364, 11.867, 20.083], [25, "5", 21.458, 16.172, 22.057], [202, "5", -22.379, 31.979, 19.517]];
var sensor_coords=[f1_sensor_coords,f2_sensor_coords,f3_sensor_coords,f4_sensor_coords,f5_sensor_coords];
var floormap_outer=[[['0', '0'], ['11.14', '0']],
     [['11.14', '0'], ['11.14', '3.79']],
     [['11.14', '3.79'], ['17.33', '3.79']],
     [['17.33', '3.79'], ['43.16', '3.59']],
     [['43.16', '3.59'], ['49.57', '3.59']],
     [['49.57', '3.59'], ['49.57', '32.09']],
     [['49.57', '32.09'], ['34.27', '32.21']],
     [['34.27', '32.21'], ['34.27', '36.13']],
     [['34.27', '36.13'], ['11.14', '36.13']],
     [['11.14', '36.13'], ['11.14', '38.22']],
     [['11.14', '38.22'], ['-27.58', '38.22']],
     [['-27.58', '38.22'], ['-26.23', '-26.1']],
     [['-26.23', '-26.1'], ['-13.19', '-26.1']],
     [['-13.19', '-26.1'], ['-13.19', '-19.85']],
     [['-13.19', '-19.85'], ['-0.15', '-19.85']],
     [['-0.15', '-19.85'], ['0', '0']],
     [['0', '0'], ['11.14', '0']],
     [['11.14', '0'], ['11.14', '3.79']],
     [['11.14', '3.79'], ['17.33', '3.79']],
     [['17.33', '3.79'], ['43.16', '3.59']],
     [['43.16', '3.59'], ['49.57', '3.59']],
     [['49.57', '3.59'], ['49.57', '32.21']],
     [['49.57', '32.21'], ['34.27', '32.21']],
     [['34.27', '32.21'], ['34.27', '36.13']],
     [['34.27', '36.13'], ['11.14', '36.13']],
     [['11.14', '36.13'], ['11.14', '38.22']],
     [['11.14', '38.22'], ['-27.58', '38.22']],
     [['-27.58', '38.22'], ['-26.23', '-26.1']],
     [['-26.23', '-26.1'], ['-13.19', '-26.1']],
     [['-13.19', '-26.1'], ['-13.19', '-19.85']],
     [['-13.19', '-19.85'], ['-0.15', '-19.85']],
     [['-0.15', '-19.85'], ['0', '0']],
     [['0', '0'], ['11.14', '0']]];
var floormap_inner=[
     [['17.158', '11.973'], ['36.364', '11.867']],
     [['36.364', '11.867'], ['36.364', '25.379']],
     [['36.364', '25.379'], ['-3.791', '25.379']],
     [['-3.791', '25.379'], ['-14.126', '25.44']],
     [['-14.126', '25.44'], ['-14.126', '31.979']],
     [['-14.126', '31.979'], ['-22.379', '31.979']],
     [['-22.379', '31.979'], ['-22.379', '16']],
     [['-22.379', '16'], ['-2.6105', '13.9865']],  
     [['-2.6105', '13.9865'], ['17.158', '11.973']],
     [['17.158', '11.973'], ['36.364', '11.867']]];
var height_scale, x_scale, y_scale, color_scale, color;

function initV1() {
	v1.svg=[];
	let dimensions = getDimensions("v1");
	v1.w = Math.floor(dimensions[0])/5;
	v1.h = Math.floor(dimensions[1]);
    v1.x = Math.floor(dimensions[2]);
    v1.y = Math.floor(dimensions[3]);
	['.first','.second','.third','.fourth','.fifth'].forEach((f,i)=>v1.svg.push(addFloorSVG(f,i)));
}

function addFloorSVG(selector, id) {
	return d3.select(selector).append('svg')
			.attr('width', "100%")
			.attr('height', "100%")
            .attr('id', id)
		.call(
			d3.drag()
				.on('drag', dragged)
				.on('start', dragStart)
				.on('end', dragEnd))
		.append('g')
			.attr("stroke","white");
}

var origin = [100, 170], beta = 0,
	cubesData = [[],[],[],[],[]], yLineInner=[[],[],[],[],[]],
	yLineOuter=[[],[],[],[],[]], alpha = 0,
	yStartAngle = -0.4166025040629945, xStartAngle=0.37562520858138826;
var mx, my, mouseX, mouseY;
var cubes3D = d3._3d()
    .shape('CUBE')
    .x(function(d){ return d.x; })
    .y(function(d){ return d.y; })
    .z(function(d){ return d.z; })
    .rotateY(yStartAngle)
    .rotateX(xStartAngle);

var yScale3dInner = d3._3d()
    .shape('LINE_STRIP')
    .rotateX(xStartAngle)
    .rotateY(yStartAngle);

var yScale3dOuter = d3._3d()
    .shape('LINE_STRIP')
    .rotateX(xStartAngle)
    .rotateY(yStartAngle);

function dragged() {
	let id=this.id;
    mouseX = mouseX || 0;
    mouseY = mouseY || 0;
    beta   = (d3.event.x - mx + mouseX) * Math.PI / 230 ;
    alpha  = (d3.event.y - my + mouseY) * Math.PI / 230  * (-1);

    let data = [
        yScale3dInner.rotateY(beta + yStartAngle)([yLineInner[id]]),
        yScale3dOuter.rotateY(beta + yStartAngle)([yLineOuter[id]]),
        cubes3D.rotateY(beta + yStartAngle)(cubesData[id])
    ];
    processData(id,data, 0);
}

function dragStart() {
    mx = d3.event.x;
    my = d3.event.y;
}

function dragEnd() {
    mouseX = d3.event.x - mx + mouseX;
    mouseY = d3.event.y - my + mouseY;
}

function processData(id, data, tt){
	let parent=v1.svg[id];
	var cubes = parent.selectAll('g.cube').data(data[2], function(d){ return d.id });
    var yScaleInner = parent.selectAll('path.yScaleInner').data(data[0]);
    var yScaleOuter = parent.selectAll('path.yScaleOuter').data(data[1]);

    var faces = cubes
        .enter()
        .append('g')
        	.attr('class', d=>'cube sensor'+d.id)
            // .attr('fill', function(d){ return d.color; })
            .attr('fill', d3.rgb(33, 150, 243))
            .attr('stroke', function(d){ return d3.color(d.color).darker(2);})
            .attr('stroke-width', 0.5)
	        .on("hovered", function(d, i) {
	            sid = d3.event.detail.id;
                d3.range(5).forEach(function(floor) {
                    v1.svg[floor].selectAll('g.cube')
                        .attr('opacity',0.5)
                    });
	            if(+sid===d.id) {
                     d3.select(this)
                        .attr('opacity',1)
                        .attr('stroke', 'black');
	            }
	        })
	        .on("unhovered", function(d,i) {
                sid=d3.event.detail.id;
                d3.range(5).forEach(function(floor) {
                    v1.svg[floor].selectAll('g.cube')
                        .attr('opacity',1)
                    });
                if(+sid===d.id) {
                    d3.select(this)
                        .attr('stroke', d3.color(this.__data__.color).darker(2));
                }
	        })
	        .on("mouseover", function(d, i) {
                var tooltip_data = [
                    "Sensor: "+sensor_info[d.id]['daq_name'],
                    {
                        "key": "Average Power",
                        "value": v1_data.value[d.id].toExponential(2)
                    }
                ];
                var position = [
                    d3.event.x,
                    d3.event.y
                ];
                updateTooltip(tooltip_data, position);
	            return commonMouseover(this, d, 'v1');
	        })
	        .on("mouseout", function(d) {
	            return commonMouseout(this, d, 'v1');
	        })
            .on("click", function(d, i) {
                addToSelection(d.id);
                selectedAnimation(d3.event.x,d3.event.y);
            })
	    .merge(cubes)
        .selectAll('path.face')
        	.data(d=>d.faces, d=>d.face);

     faces
        .enter()
        .append('path')
        	.attr('class', 'face')
        .merge(faces)
            .transition()
            .delay(500)
            .duration(500)
        	.attr('d', cubes3D.draw);

    yScaleInner
        .enter()
        .append('path')
        	.attr('class', 'yScaleInner')
	        .attr('stroke-width', 0.75)
	        .attr('fill','none')
        .merge(yScaleInner)
        	.attr('d', yScale3dInner.draw);

    if(id!=4)
        yScaleOuter
            .enter()
            .append('path')
    	        .attr('class', 'yScaleOuter')
    	        .attr('stroke-width', 0.75)
    	        .attr('fill','none')
            .merge(yScaleOuter)
            	.attr('d', yScale3dOuter.draw);
}

function makeCube(h, x, z){
    return [
        {x: x - 3, y: h, z: z + 3}, // FRONT TOP LEFT
        {x: x - 3, y: 0, z: z + 3}, // FRONT BOTTOM LEFT
        {x: x + 3, y: 0, z: z + 3}, // FRONT BOTTOM RIGHT
        {x: x + 3, y: h, z: z + 3}, // FRONT TOP RIGHT
        {x: x - 3, y: h, z: z - 3}, // BACK  TOP LEFT
        {x: x - 3, y: 0, z: z - 3}, // BACK  BOTTOM LEFT
        {x: x + 3, y: 0, z: z - 3}, // BACK  BOTTOM RIGHT
        {x: x + 3, y: h, z: z - 3}, // BACK  TOP RIGHT
    ];
}

function drawV1() {
    height_scale = d3.scaleLinear()
                            .domain(d3.extent(Object.values(v1_data.value), d=>parseFloat(d)))
                            .range([-1, -1*v1.h/2])
                            .clamp(true);
    x_scale = d3.scaleLinear()
                            .domain([d3.min(floormap_outer.flat(), d=>parseFloat(d[0])),
                                     d3.max(floormap_outer.flat(), d=>parseFloat(d[0])),])
                            .range([v1.padding.l, v1.w-v1.padding.r])
                            .clamp(true);
    y_scale = d3.scaleLinear()
                            .domain([d3.min(floormap_outer.flat(), d=>parseFloat(d[1])),
                                     d3.max(floormap_outer.flat(), d=>parseFloat(d[1])),])
                            .range([v1.h-v1.padding.b, v1.padding.t])
                            .clamp(true);

    color = d3.scaleSequential(d3.interpolateYlOrRd);
    color_scale = d3.scaleLinear()
                            .domain(d3.extent(Object.values(v1_data.value), d=>parseFloat(d)))
                            .range([0,1]);

    origin = [x_scale.range()[0]+15, y_scale.range()[0]]
    yScale3dInner.origin(origin);
    cubes3D.origin(origin);
    yScale3dOuter.origin(origin);

    d3.range(5).forEach(function(id) {
        yLineInner[id] = [];
        yLineOuter[id] =[];
        cubesData[id] =[];
        for(let i=0;i<floormap_inner.length; i++){
            yLineInner[id].push([x_scale(parseFloat(floormap_inner[i][0][0])),1,
                                 y_scale(parseFloat(floormap_inner[i][0][1]))]);

        }
        for(let i=0;i<floormap_outer.length; i++){
            yLineOuter[id].push([x_scale(parseFloat(floormap_outer[i][0][0])),1,
                                 y_scale(parseFloat(floormap_outer[i][0][1]))])
        }
        for(let i=0;i<sensor_coords[id].length; i++) {
            let x=x_scale(parseFloat(sensor_coords[id][i][2]));
            let z=y_scale(parseFloat(sensor_coords[id][i][3]));
            let h=height_scale(parseFloat(v1_data.value[sensor_coords[id][i][0]]))

            let _cube=makeCube(h,x,z);
            _cube.id=sensor_coords[id][i][0];
            _cube.color=color(color_scale(parseFloat(v1_data.value[sensor_coords[id][i][0]])));

            cubesData[id].push(_cube);
        }

        let data = [
            yScale3dInner([yLineInner[id]]),
            yScale3dOuter([yLineOuter[id]]),
            cubes3D(cubesData[id])
        ];
        processData(id, data, 1000);
    });
}


